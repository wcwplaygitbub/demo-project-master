sharding:
  jdbc:
    datasource:
      # 配置数据源
      names: ds0,ds1,ds2
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.82.27.177:3306/ds0
        username: root
        password: 123456
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.82.27.177:3306/ds1
        username: root
        password: 123456
      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.82.27.177:3306/ds2
        username: root
        password: 123456
    config:
      sharding:
        # 默认数据源，可以将不分库分表的数据表放在这里(此处的表需与已经分库分表的表完全没有关联，不会产生联表查询操作，因为跨库连表查询是没办法实现的)
        # 3.1.0版本中dql查询存在bug，不使用默认库.会在下个版本中修复
        default-data-source-name: ds2
        # 默认分库策略,根据userId对2取余确定库
        default-database-strategy:
          inline:
            sharding-column: userId
            algorithm-expression: ds$->{userId % 2}
        # 配置表策略
        tables:
          # 公共表(比如字典表,角色表，权限表等),不分库分表,数据将发送到所有库中,方便联表查询
          dictionary:
            # 配置主键，以便sharding-jdbc生成主键
            key-generator-column-name: dictionaryId
            actual-data-nodes: ds$->{0..1}.dictionary
          # user 已经根据userId分库，因此user表不进行分表
          user:
            key-generator-column-name: userId
            actual-data-nodes: ds$->{0..1}.user
          order:
            key-generator-column-name: orderId
            actual-data-nodes: ds$->{0..1}.order$->{0..1}
            table-strategy:
              inline:
                # 设置分片键，相同分片键的连表查询不会出现笛卡儿积
                sharding-column: orderId
                # 设置分表规则,根据订单id对2取余分两个表
                algorithm-expression: order$->{orderId%2}
          order_item:
            key-generator-column-name: orderItemId
            actual-data-nodes: ds$->{0..1}.order_item$->{0..1}
            table-strategy:
              inline:
                sharding-column: orderId
                # 设置分表规则,根据订单id对2取余分两个表
                algorithm-expression: order_item$->{orderId%2}
      # 打印sql解析过程
      props:
        sql.show: true